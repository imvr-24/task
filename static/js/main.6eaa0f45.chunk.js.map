{"version":3,"sources":["components/timezone.component.jsx","components/card.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["TimeZoneComponent","timezone","tz","ctz","handleChange","tmp","forEach","prop","push","value","label","className","defaultValue","placeholder","options","onChange","Card","inps","currentZone","currentDT","App","zoneInterval","selectedZoneInterval","fetchZone","fetch","then","res","json","result","setState","zoneName","formatted","initialDisplay","convertTimeZone","zone","setInterval","fetchSelectedTimeZone","zones","timestamp","dt","convertToFormttedDate","selectedDT","selectedZone","Date","toLocaleString","state","this","clearInterval","Object","keys","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6eaa0f45.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nexport const TimeZoneComponent = ({ timezone, tz, ctz, handleChange }) => {\r\n\r\n  const tmp = [...tz];\r\n\r\n  timezone.forEach((prop) => {\r\n    tmp.push({ value: prop, label: prop });\r\n  });\r\n\r\n  return (\r\n    <div className=\"container-lt\">\r\n      <div className=\"row ml-4\">\r\n        <Select className=\"mt-4 col-md-4 \" defaultValue={ctz} />\r\n        <Select\r\n          className=\"mt-4 col-md-4 \"\r\n          placeholder=\"Timezone to Convert\"\r\n          options={tmp}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = ({ inps }) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <h2> {inps.currentZone} </h2>\r\n            <p> {inps.currentDT} </p>\r\n        </div>\r\n    )\r\n};","import React, { Component } from \"react\";\n\nimport timezone from \"./timezone.json\";\nimport { TimeZoneComponent } from './components/timezone.component.jsx';\nimport { Card } from './components/card.component.jsx'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nlet ctz = [{\n  value: 'Asia/Kolkata',\n  label: 'Asia/Kolkata'\n}]\nlet tz = []\n\nexport class App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      currentZone: '',\n      currentDT: '',\n      selectedZone: '',\n      selectedDT: '',\n      initialDisplay: false\n    };\n    \n  }\n\n  zoneInterval = 0;\n  selectedZoneInterval = 0;\n\n  componentDidMount() {\n    this.zoneInterval = setInterval(() => {\n      this.fetchZone();\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.zoneInterval);\n    clearInterval(this.selectedZoneInterval);\n  }\n\n  fetchZone = () => {\n    fetch(\"https://api.timezonedb.com/v2.1/get-time-zone?key=SC4W3H2GK55S&format=json&by=zone&zone=Asia/Kolkata\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            currentZone: result.zoneName,\n            currentDT: result.formatted,\n            initialDisplay: true\n          });\n        }\n      );\n  }\n\n  convertTimeZone = (zone) => {\n    this.selectedZoneInterval = setInterval(() => {\n      this.fetchSelectedTimeZone(zone);\n    }, 4000);\n  };\n\n  fetchSelectedTimeZone = (zone) => {\n    fetch(`https://api.timezonedb.com/v2.1/list-time-zone?key=SC4W3H2GK55S&format=json&zone=${zone.value}`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const { zoneName, timestamp } = result.zones[0];\n          const dt = this.convertToFormttedDate(timestamp);\n          this.setState({\n            selectedDT: dt,\n            selectedZone: zoneName\n          });\n        }\n      )\n  };\n\n  convertToFormttedDate = (timestamp) => {\n\n    const milliseconds = timestamp * 1000;\n    const dateObject = new Date(milliseconds);\n    const dateFormat = dateObject.toLocaleString();\n\n    return dateFormat;\n  };\n\n  handleChange = selectedZone => {\n    this.setState({ selectedZone: selectedZone.label });\n    this.convertTimeZone(selectedZone);\n  };\n\n  render() {\n    return (\n      <div className='container ct'>\n        <TimeZoneComponent timezone={Object.keys(timezone)} tz={tz} ctz={ctz} handleChange={this.handleChange} />\n        <div className='row'>\n          <div className='col-md-4'>\n            {this.state.initialDisplay ? <Card inps={this.state} /> : null}\n          </div>\n\n          {\n            this.state.selectedDT ? (\n              <div className='col-md-4'>\n                <div className='card-container'>\n                  <h2> {this.state.selectedZone} </h2>\n                  <p> {this.state.selectedDT} </p>\n                </div>\n              </div>\n            ) : null\n          }\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}